#Writen by Charles Dardaman
#03/21/2018
#Will ask for the a list of Domains and IPs to be included, expected to be in clear text with a new line between each entry
#Will ask for the user's analysis in markdown format for each file
#Will ask for the user's description in markdown format
#Will ask for the user's recommendation in markdown format

import requests, os, sys, hashlib, time, markdown, magic, ssdeep

#Global Variables
api_key = "Add your VT api key here"
num_files = 0
num_domains = 0
num_ips = 0

def sha256(file):
    #read in the file
    r = open(file,'rb')
    n = r.read()
    #return the sha256
    return hashlib.sha256(n).hexdigest()

def md5(file):
    #read in the file
    r = open(file,'rb')
    n = r.read()
    #return the md5
    return hashlib.md5(n).hexdigest()

def VT_report(hash):
    url = 'https://www.virustotal.com/vtapi/v2/file/report'
    params = {'apikey': api_key, 'resource': hash}
    return requests.get(url, params=params)

def VT_parse(data):
    #Make sure that there was a response
    if data['response_code'] == 1:
        #Start AV table creation
        html = "Virus Total |" + str(data['positives']) + "/" + str(data['total']) + "\n"
        html += "-----|-----\n"

        #Get list of all the AVs that caught it and what they declared it as
        for key, value in data['scans'].items():
            if data['scans'][key]['detected'] == True:
                #Add every finding to the table
                html += key + " | " + data['scans'][key]['result'] + "\n"

        #Print table
        html = markdown.markdown(html, extensions=['markdown.extensions.tables'])      
        write_html(html)        

    else:
        html = "Virus Total  |\n"
        html += "----------|\n"
        html += "File is not in Virus Total|\n"
        html = markdown.markdown(html, extensions=['markdown.extensions.tables'])      
        write_html(html)

#If given a list of domains then it will print them all out
def domains():
    count = 0
    lines_html = ""
    domains_html = "Domains ||\n"
    domains_html += "-----|-----\n"
    #Ask the user if they would like to add domains
    file_name = input("Please enter the path to the file containing Domain names:\n")
    #if it exists add all the domains to a table and print them
    try: 
        with open(file_name, "r") as r:
            line = r.readline()
            for line in r:
                lines_html += "| | " + line
                count += 1
        #Print
        domains_html += "Identified |" + str(count) + "\n"
        domains_html += lines_html
        domains_html = markdown.markdown(domains_html, extensions=['markdown.extensions.tables']) 
        write_html(domains_html)

    except IOError:
                print(file_name + " does not exist")
                domains_html += "Identified | 0\n"
                domains_html = markdown.markdown(domains_html, extensions=['markdown.extensions.tables']) 
                write_html(domains_html)

#If given a list of IPs then it will print them all out
def ips():
    count = 0
    lines_html = ""
    ips_html = "IPs ||\n"
    ips_html += "-----|-----\n"
    #Ask the user if they would like to add IPs
    file_name = input("Please enter the path to the file containing IPs:\n")
    #if it exists add all the IPs to a table and print them
    try: 
        with open(file_name, "r") as r:
            line = r.readline()
            for line in r:
                lines_html += "| | " + line
                count += 1
        #Print
        ips_html += "Identified |" + str(count) + "\n"
        ips_html += lines_html
        ips_html = markdown.markdown(ips_html, extensions=['markdown.extensions.tables']) 
        write_html(ips_html)

    except IOError:
                print(file_name + " does not exist")
                ips_html += "Identified | 0\n"
                ips_html = markdown.markdown(ips_html, extensions=['markdown.extensions.tables']) 
                write_html(ips_html)

#Prints out the name table for every file
def file_table_print(file,hash):
    write_html(markdown.markdown("<br>**" + hash + "**\n"))
    html = "Details ||\n"
    html += "-----|-----\n"
    html += "Name |" + hash + "\n"
    html += "Size |" + str(os.path.getsize(file)) + " bytes \n"
    html += "MD5 |" + md5(file) + "\n"
    html += "SHA256 |" + hash + "\n"
    html += "ssdeep |" + ssdeep.hash(file) + "\n"
    html = markdown.markdown(html, extensions=['markdown.extensions.tables'])
    write_html(html)

#Prints out the prereqs for the report
def initial_print():
    #Prints out the header to the CSS sheet
    write_html('<head>\n\t<link rel="stylesheet" type="text/css" href="style.css">\n</head>\n')
    
    #Print summary/description
    write_html(markdown.markdown("# Summary\n"))
    write_html(markdown.markdown("------\n"))
    description_print()

    #Print number and hashes for all the files
    files_html = "Files ||\n"
    files_html += "-----|-----\n"
    #Autofill files
    files_html_to_add = work(True)
    files_html += "Analyzed | " + str(num_files) + "\n"
    files_html += files_html_to_add
    files_html = markdown.markdown(files_html, extensions=['markdown.extensions.tables'])
    write_html(markdown.markdown(files_html))
    
    #Print domains and ips
    domains()
    ips()

#Prints out the user's description
def description_print():
    write_html(markdown.markdown("## Description\n"))
    #Ask the user for the path to their description
    file_name = input("Please enter the path to the file containing your description:\n")
    #If it exists print description
    try: 
        with open(file_name, "r") as r:
            text = r.read()
            write_html(markdown.markdown(text))

    except IOError:
                print(file_name + " does not exist")
                write_html(markdown.markdown("Enter description here\n"))

#Prints out the user's analysis per file
def analysis_print(hash):
    write_html(markdown.markdown("\n## Analysis\n"))
    #Ask the user for the path to their analysis
    file_name = input("Please enter the path to the file containing your analysis for :" + hash +"\n")
    #If it exists print analysis
    try: 
        with open(file_name, "r") as r:
            text = r.read()
            write_html(markdown.markdown(text))

    except IOError:
                print(file_name + " does not exist")
                write_html(markdown.markdown("Enter analysis here\n"))

#Prints out the user's recommendations
def recommendation_print():
    write_html(markdown.markdown("# Recommendations\n"))
    write_html(markdown.markdown("------\n"))
    #Ask the user for the path to their recommedations
    file_name = input("Please enter the path to the file containing your recommendations:\n")
    #If it exists print recommendations
    try: 
        with open(file_name, "r") as r:
            text = r.read()
            write_html(markdown.markdown(text))

    except IOError:
                print(file_name + " does not exist")
                write_html(markdown.markdown("Enter recommendations here\n"))

#Used to write everything needed to out.html
def write_html(string):
    if os.path.exists("out.html"):
        write_style = "a"
    else:
        write_style = "w"

    with open("out.html", write_style) as r:
        r.write(string)

#Checks to see if its in prerun or not, if it is then it will only run hashes
def work(pre):
    global num_files
    count = 0
    hash_list = ""
    dir_path = sys.argv[1]

    if os.path.exists(dir_path):
        files=os.listdir(dir_path)
    else:
        print("Directory does not exist.")
        return 1

    for item in files:
        #get full path
        file = os.path.join(dir_path,item)
        #if not a directory
        if os.path.isdir(file) == False:
            try:
                #get hash
                hash = sha256(file)

                if pre == True:
                    hash_list += "| | " + hash + "\n"
                else:
                    #data comes back as a dict
                    VT_data = VT_report(hash)
                    #Print out the file table
                    file_table_print(file,hash)
                    #Parse the VT data
                    VT_parse(VT_data.json())
                    #Print Analysis
                    analysis_print(hash)

            except IOError:
                print(file + " does not exist")

            #Public API has a 4 request per min limit
            count += 1
            if count == 3 and pre == False:
                count = 0
                time.sleep(61)

    if pre == True:
        num_files = count
        return hash_list

def main():
    #Makes sure a Dir was specified
    if len(sys.argv)!=2:
        print("Please specify a directory.")
        return 1

    #Makes sure there is no output file leftover
    if os.path.exists("out.html"):
        yes = input("out.html already exists, would you like to overwrite? y/n: ")
        if yes == "y":
            os.remove("out.html")
        else:
            return 1

    #Call the inital report printing
    initial_print()

    #Do work
    work(False)

    #Print user's recommendations
    recommendation_print()

if __name__ =='__main__':
    main()